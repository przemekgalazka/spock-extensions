plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.2.3'
}

scmVersion {
    createReleaseCommit = true
    tag {
        prefix = 'spock-extensions'
    }
}


repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

project.version = scmVersion.version
group = "com.geodevv.testing"
archivesBaseName = "spock-extensions"
version = scmVersion.version

dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.codehaus.groovy:groovy-all:2.4.3'
    compile 'org.spockframework:spock-core:1.0-groovy-2.4'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'joda-time:joda-time:2.7'

    testCompile "junit:junit:4.11"
    testCompile 'cglib:cglib-nodep:2.2'
}

test {
    include '**/*Spec.*'
}

///////////////////////////////////////////
// snapshots & release deployment
//////////////////////////////////////////
//nexusStaging {
//    packageGroup = "com.geodevv"
//    stagingProfileId = 'a27938c916b08a'
//}


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }


            pom.artifactId = 'spock-extensions'

            pom.project {
                name 'geodevv spock extensions'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'spock extensions like doomsday'
                url 'http://spock-extensions.geodevv.com`'
                scm {
                    connection 'git@github.com:przemekgalazka/spock-extensions.git'
                    developerConnection 'git@github.com:przemekgalazka/spock-extensions.git'
                    url 'https://github.com/przemekgalazka/spock-extensions'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'przemekgalazka'
                        name 'Przemek Galazka'
                        email 'przemek DOTa galazka Monceey gmail dut com'
                    }
                }
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom.withXml {
                //#89 - workaround to not to have only runtime dependencies in generated pom.xml
                //Known limitation in maven-publish - - http://forums.gradle.org/gradle/topics/maven_publish_plugin_generated_pom_making_dependency_scope_runtime#reply_14120711
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

uploadArchives.dependsOn { check }




